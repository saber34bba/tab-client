public function place_order_sub(Request $requests)
    {
        try {
            $datas =  $requests["subscription"];
            if (is_string($datas)){
                $datas = json_decode($requests["subscription"]);
            }
            foreach ($datas as $request) {
//                $validator = Validator::make($request, [
//                    'order_amount' => 'required_without:abonnement_id',
//                    'payment_method' => 'required_without:abonnement_id|in:cash_on_delivery,digital_payment,wallet',
//                    'order_type' => 'required_without:abonnement_id|in:take_away,delivery',
//                    'restaurant_id' => 'required',
//                    'distance' => 'required_if:order_type,delivery',
//                    'address' => 'required_if:order_type,delivery',
//                    'longitude' => 'required_if:order_type,delivery',
//                    'latitude' => 'required_if:order_type,delivery',
//                    'dm_tips' => 'nullable|numeric',
//                    'abonnement_id' => 'nullable|numeric',
//                    'weather' => 'numeric'
//                ]);

//                if ($validator->fails()) {
//                    return response()->json(['errors' => Helpers::error_processor($validator)], 403);
//                }


                $abonnement_id = null;
                if (isset($request->abonnement_id)) {
                    $abonnement_id = $request->abonnement_id;
                }

//                if ($request->payment_method == 'wallet' && Helpers::get_business_settings('wallet_status', false) != 1) {
//                    return response()->json([
//                        'errors' => [
//                            ['code' => 'payment_method', 'message' => trans('messages.customer_wallet_disable_warning')]
//                        ]
//                    ], 203);
//                }
                $coupon = null;
                $delivery_charge = null;
                $free_delivery_by = null;
                $schedule_at = $request->schedule_at ? \Carbon\Carbon::parse($request->schedule_at) : now();
                if ($request->schedule_at && $schedule_at < now()) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'order_time', 'message' => trans('messages.you_can_not_schedule_a_order_in_past')]
                        ]
                    ], 406);
                }
                $restaurant = Restaurant::with('discount')->selectRaw('*, IF(((select count(*) from `restaurant_schedule` where `restaurants`.`id` = `restaurant_schedule`.`restaurant_id` and `restaurant_schedule`.`day` = ' . $schedule_at->format('w') . ' and `restaurant_schedule`.`opening_time` < "' . $schedule_at->format('H:i:s') . '" and `restaurant_schedule`.`closing_time` >"' . $schedule_at->format('H:i:s') . '") > 0), true, false) as open')->where('id', $request->restaurant_id)->first();

                if (!$restaurant) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'order_time', 'message' => trans('messages.restaurant_not_found')]
                        ]
                    ], 404);
                }

                if ($request->schedule_at && !$restaurant->schedule_order) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'schedule_at', 'message' => trans('messages.schedule_order_not_available')]
                        ]
                    ], 406);
                }

                if ($restaurant->open == false) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'order_time', 'message' => trans('messages.restaurant_is_closed_at_order_time')]
                        ]
                    ], 406);
                }

//                if ($request['coupon_code']) {
//                    $coupon = Coupon::active()->where(['code' => $request['coupon_code']])->first();
//                    if (isset($coupon)) {
//                        $staus = CouponLogic::is_valide($coupon, $request->user()->id, $request['restaurant_id']);
//                        if ($staus == 407) {
//                            return response()->json([
//                                'errors' => [
//                                    ['code' => 'coupon', 'message' => trans('messages.coupon_expire')]
//                                ]
//                            ], 407);
//                        } else if ($staus == 406) {
//                            return response()->json([
//                                'errors' => [
//                                    ['code' => 'coupon', 'message' => trans('messages.coupon_usage_limit_over')]
//                                ]
//                            ], 406);
//                        } else if ($staus == 404) {
//                            return response()->json([
//                                'errors' => [
//                                    ['code' => 'coupon', 'message' => trans('messages.not_found')]
//                                ]
//                            ], 404);
//                        }
//                        if ($coupon->coupon_type == 'free_delivery') {
//                            $delivery_charge = 0;
//                            $coupon = null;
//                            $free_delivery_by = 'admin';
//                        }
//                    } else {
//                        return response()->json([
//                            'errors' => [
//                                ['code' => 'coupon', 'message' => trans('messages.not_found')]
//                            ]
//                        ], 401);
//                    }
//                }
                $per_km_shipping_charge = (float)BusinessSetting::where(['key' => 'per_km_shipping_charge'])->first()->value;
                $minimum_shipping_charge = (float)BusinessSetting::where(['key' => 'minimum_shipping_charge'])->first()->value;

                if ($request->latitude && $request->longitude) {
                    $point = new Point($request->latitude, $request->longitude);
                    $zone = Zone::where('id', $restaurant->zone_id)->contains('coordinates', $point)->first();
                    if (!$zone) {
                        $errors = [];
                        array_push($errors, ['code' => 'coordinates', 'message' => trans('messages.out_of_coverage')]);
                        return response()->json([
                            'errors' => $errors
                        ], 403);
                    }
                    if ($zone->per_km_shipping_charge && $zone->minimum_shipping_charge) {
                        $per_km_shipping_charge = $zone->per_km_shipping_charge;
                        $minimum_shipping_charge = $zone->minimum_shipping_charge;
                    }
                }

                if ($request->order_type != 'take_away' && !$restaurant->free_delivery && !isset($delivery_charge)) {
                    if ($restaurant->self_delivery_system) {
                        $per_km_shipping_charge = $restaurant->per_km_shipping_charge;
                        $minimum_shipping_charge = $restaurant->minimum_shipping_charge;
                    }
                }

                $original_delivery_charge = ($request->distance * $per_km_shipping_charge > $minimum_shipping_charge) ? $request->distance * $per_km_shipping_charge : $minimum_shipping_charge;

                if ($request->order_type == 'take_away') {
                    $per_km_shipping_charge = 0;
                    $minimum_shipping_charge = 0;
                }
                if (!isset($delivery_charge)) {
                    $delivery_charge = ($request->distance * $per_km_shipping_charge > $minimum_shipping_charge) ? $request->distance * $per_km_shipping_charge : $minimum_shipping_charge;
                }


                $address = [
                    'contact_person_name' => $request->contact_person_name ? $request->contact_person_name : $request->user()->f_name . ' ' . $request->user()->f_name,
                    'contact_person_number' => $request->contact_person_number ? $request->contact_person_number : $request->user()->phone,
                    'address_type' =>'Delivery',
                    'address' => $request->address,
                    'floor' => $request->floor,
                    'road' => $request->road,
                    'house' => $request->house,
                    'longitude' => (string)$request->longitude,
                    'latitude' => (string)$request->latitude,
                ];

                $total_addon_price = 0;
                $product_price = 0;
                $restaurant_discount_amount = 0;

                $order_details = [];
                $order = new Order();
                

                $order->user_id = $requests->user()->id;
                $order->abonnement_id = $abonnement_id;
                $order->order_amount = $request->order_amount;

                $order->payment_status = $request->payment_method  == 'paid';
                $order->order_status = $request->payment_method == 'digital_payment' ? 'failed' : ($request->payment_method == 'wallet' ? 'confirmed' : 'pending');
                $order->coupon_code = null;
                $order->payment_method = $request->payment_method;
                $order->transaction_reference = null;
                $order->order_note = null;
                $order->order_type = $request->order_type;
                $order->restaurant_id = $request->restaurant_id;
                $order->delivery_charge = round($delivery_charge, config('round_up_to_digit')) ?? 0;
                $order->original_delivery_charge = round($original_delivery_charge, config('round_up_to_digit'));
                $order->delivery_address = json_encode($address);
                $order->schedule_at = $schedule_at;
                $order->scheduled = $request->schedule_at ? 1 : 0;
                $order->otp = str_pad(rand(0, 9999), 4, "0", STR_PAD_LEFT);
                $order->zone_id = $restaurant->zone_id;
                $dm_tips_manage_status = BusinessSetting::where('key', 'dm_tips_status')->first()->value;
                if ($dm_tips_manage_status == 1) {
                    $order->dm_tips = $request->dm_tips ?? 0;
                } else {
                    $order->dm_tips = 0;
                }

                $order->weather = (float)$request->restaurant_id;
                $order->pending = now();
                $order->confirmed = $request->payment_method == 'wallet' ? now() : null;
                $order->created_at = now();
                $order->updated_at = now();
                $cat = $request->cart;
                if (is_string($cat)) {
                    $cat = json_decode($cat);

                }

                foreach ($cat as $c) {


                        $product = Food::active()->find($c->food_id);
                        if ($product) {
                            $price = 0;

                            $product->tax = $restaurant->tax;
                            $product = Helpers::product_data_formatting($product, false, false, app()->getLocale());

                            $or_d = [
                                'food_id' => $c->food_id,
                                'item_campaign_id' => null,
                                'food_details' => json_encode($product),
                                'quantity' => $c->quantity,
                                'price' => (isset($request->abonnement_id) ? 0 : round($price, config('round_up_to_digit'))),
                                'tax_amount' => round(Helpers::tax_calculate($product, $price), config('round_up_to_digit')),
                                'discount_on_food' => Helpers::product_discount_calculate($product, $price, $restaurant),
                                'discount_type' => 'discount_on_product',
                                'variant' => json_encode($c->variant),
                                'variation' => json_encode($c->variation),

                                'add_ons' => "[]" ,
                                'total_add_on_price' =>  0 ,

                                'created_at' => now(),
                                'updated_at' => now()
                            ];

                            $product_price += $price * $or_d['quantity'];
                            $restaurant_discount_amount += $or_d['discount_on_food'] * $or_d['quantity'];
                            $order_details[] = $or_d;
                        } else {
                            return response()->json([
                                'errors' => [
                                    ['code' => 'food', 'message' => trans('messages.product_unavailable_warning')]
                                ]
                            ], 401);
                        }


                }
                $restaurant_discount = Helpers::get_restaurant_discount($restaurant);
                if (isset($restaurant_discount)) {
                    if ($product_price + $total_addon_price < $restaurant_discount['min_purchase']) {
                        $restaurant_discount_amount = 0;
                    }

                    if ($restaurant_discount_amount > $restaurant_discount['max_discount']) {
                        $restaurant_discount_amount = $restaurant_discount['max_discount'];
                    }
                }
                $coupon_discount_amount = $coupon ? CouponLogic::get_discount($coupon, $product_price + $total_addon_price - $restaurant_discount_amount) : 0;
                $total_price = $product_price + $total_addon_price - $restaurant_discount_amount - $coupon_discount_amount;

                $tax = $restaurant->tax;
                $total_tax_amount = ($tax > 0) ? (($total_price * $tax) / 100) : 0;

                if ($restaurant->minimum_order > $product_price + $total_addon_price) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'order_time', 'message' => trans('messages.you_need_to_order_at_least', ['amount' => $restaurant->minimum_order . ' ' . Helpers::currency_code()])]
                        ]
                    ], 406);
                }

                $free_delivery_over = BusinessSetting::where('key', 'free_delivery_over')->first()->value;
                if (isset($free_delivery_over)) {
                    if ($free_delivery_over <= $product_price + $total_addon_price - $coupon_discount_amount - $restaurant_discount_amount) {
                        $order->delivery_charge = 0;
                        $free_delivery_by = 'admin';
                    }
                }

                if ($restaurant->free_delivery) {
                    $order->delivery_charge = 0;
                    $free_delivery_by = 'vendor';
                }

                if ($coupon) {
                    $coupon->increment('total_uses');
                }

                $order_amount = round($total_price + $total_tax_amount + $order->delivery_charge, config('round_up_to_digit'));

                if ($request->payment_method == 'wallet' && $request->user()->wallet_balance < $order_amount) {
                    return response()->json([
                        'errors' => [
                            ['code' => 'order_amount', 'message' => trans('messages.insufficient_balance')]
                        ]
                    ], 203);
                }
                // dd($order->dm_tips);

                $order->coupon_discount_amount = round($coupon_discount_amount, config('round_up_to_digit'));
                $order->coupon_discount_title = $coupon ? $coupon->title : '';
                $order->free_delivery_by = $free_delivery_by;
                $order->restaurant_discount_amount = round($restaurant_discount_amount, config('round_up_to_digit'));
                $order->total_tax_amount = round($total_tax_amount, config('round_up_to_digit'));
                $order->order_amount = $order_amount + $order->dm_tips;


                
                $List = [];
                $List['order'] = $order;
                $List['details'] = $order_details;
                $arryOrder[] = $List;
                $AbStock = Abonnement_stocke::find($request->abonnement_stocke);

            }

            foreach ($arryOrder as $ittem){
                $order=[];
                $order_details  =[];
                try {
                    $order          =  $ittem['order'];
                    $order_details  =  $ittem['details'];
                    $order->id = 100000 + Order::all()->count() + 1;
                    if (Order::find($order->id)) {
                        $order->id = Order::orderBy('id', 'desc')->first()->id + 1;
                    }
                    $order->save();

                    foreach ($order_details as $key => $item) {
                        $order_details[$key]['order_id'] = $order->id;

                    }
                    OrderDetail::insert($order_details);

                    $restaurant->increment('total_order');
                    $customer = $requests->user();
                    $customer->zone_id = $restaurant->zone_id;
                    $customer->save();
                } catch (\Exception $e) {
                    info($e);
                    return response()->json(["line"=>$e->getLine(),"Error"=>$e->getMessage()], 403);
                }

            }
            Helpers::send_order_notification($order);
            try{
                $AbStock->ordered=1;
                $AbStock->save();
            }catch (\Exception $ex) {
                info($ex);
            }
            try{

                Mail::to($customer['email'])->send(new AbennementMail());

            }catch (\Exception $ex) {
                return response()->json(["line"=> $ex->getLine(),'errors' => $ex->getMessage()], 405);
            }
            return response()->json([
                'message' => trans('messages.order_placed_successfully'),
                'order_id' => $order->id,
                'total_ammount' => $total_price+$order->delivery_charge+$total_tax_amount
            ], 200);


        }catch (\Exception $exception){
            return response()->json(["line"=> $exception->getLine(),'errors' => $exception->getMessage()], 405);
        }
    }